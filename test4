#include <stdarg.h>
#include <unistd.h>
#include <stddef.h>

/**
 * print_char - Print a character to standard output
 * @c: The character to print
 * @char_count: Pointer to the character count
 */
void print_char(int c, int *char_count)
{
	if (write(1, &c, 1) == -1)
		return; // Handle write error here

	(*char_count)++;
}

/**
 * print_str - Print a string to standard output
 * @str: The string to print
 * @char_count: Pointer to the character count
 */
void print_str(char *str, int *char_count)
{
	if (!str)
	{
		print_str("(null)", char_count);
		return;
	}

	while (*str)
		print_char(*str++, char_count);
}

/**
 * print_int_recursive - Helper function to print integer recursively
 * @n: The integer to print
 * @char_count: Pointer to the character count
 */
void print_int_recursive(int n, int *char_count)
{
	if (n == 0)
		return;

	print_int_recursive(n / 10, char_count);

	char digit = '0' + n % 10;
	print_char(digit, char_count);
}

/**
 * print_int - Print a non-negative integer to standard output
 * @n: The integer to print
 * @char_count: Pointer to the character count
 */
void print_int(int n, int *char_count)
{
	if (n == 0)
	{
		print_char('0', char_count);
	}
	else if (n < 0)
	{
		// Handle negative numbers if needed
		print_char('-', char_count);
		print_int_recursive(-n, char_count);
	}
	else
	{
		print_int_recursive(n, char_count);
	}
}


/**
 * print_unsupported - Handle unsupported format specifier
 * @c: The unsupported format specifier
 * @char_count: Pointer to the character count
 */
void print_unsupported(char c, int *char_count)
{
	print_char('%', char_count);
	print_char(c, char_count);
}

/**
 * parse_format - Parse the format and call appropriate print functions
 * @format: The format string
 * @args: Variable arguments
 * @char_count: Pointer to the character count
 */
void parse_format(const char *format, va_list args, int *char_count)
{
	while (*format)
	{
		if (*format == '%' && *(format + 1))
		{
			if (*(format + 1) == '%')
			{
				print_char('%', char_count);
				format += 2;
			}
			else
			{
				switch (*(format + 1))
				{
				case 'c':
					print_char(va_arg(args, int), char_count);
					break;
				case 's':
					print_str(va_arg(args, char *), char_count);
					break;
				case 'd':
                case 'i':
					print_int(va_arg(args, int), char_count);
					break;
				default:
					print_unsupported(*(format + 1), char_count);
					break;
				}
				format += 2;
			}
		}
		else
		{
			print_char(*format, char_count);
			++format;
		}
	}
}

/**
 * _printf - Custom printf function
 * @format: The format string
 * @...: Variable arguments
 *
 * Return: The total number of characters printed
 */
int _printf(const char *format, ...)
{
	int char_count = 0;
	va_list args;

	va_start(args, format);
	parse_format(format, args, &char_count);
	va_end(args);

	return char_count;
}


int main(void)
{

	int len;
    int len2;


    len = _printf("Let's try to printf a simple sentence.\n");
    len2 = printf("Let's try to printf a simple sentence.\n");

    _printf("Length:[%d, %i]\n", len, len);
    printf("Length:[%d, %i]\n", len2, len2);
    _printf("Negative:[%d]\n", -762534);
    printf("Negative:[%d]\n", -762534);

	return 0;
}
